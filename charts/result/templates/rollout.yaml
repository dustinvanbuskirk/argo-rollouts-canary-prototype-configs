apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: result
  namespace: default
spec:
  replicas: 5
  revisionHistoryLimit: 2  # Keep max 2 ReplicaSets in history
  analysis:
    successfulRunHistoryLimit: 2   # Keep max 2 successful AnalysisRuns
    unsuccessfulRunHistoryLimit: 2  # Keep max 2 failed AnalysisRuns
  strategy:
    canary:
      # Reference the stable and preview services
      stableService: result-stable
      canaryService: result-preview
      
      # Istio traffic routing configuration
      trafficRouting:
        istio:
          virtualService:
            name: result-virtualservice    # Reference our Istio VirtualService
            routes:
            - primary                       # Name of the route in VirtualService to manipulate
          destinationRule:
            name: result-stable-destination-rule  # Reference our DestinationRule
            canarySubsetName: preview       # Subset name for canary
            stableSubsetName: stable        # Subset name for stable
      
      # Analysis template for curl health checks
      analysis:
        templates:
        - templateName: result-curl-analysis
        args:
        - name: service-name
          value: result
        - name: namespace
          value: voting-app
        # Note: successfulRunHistoryLimit and unsuccessfulRunHistoryLimit
        # are at spec.analysis level, not here
      
      # Canary deployment steps
      # Step 1: Run analysis with 0% traffic before routing to canary
      # Step 2: Manual approval gate before routing any traffic
      # Steps 3-6: Gradually increase traffic to 5%, 20%, 50%, 100%
      steps:
      # Step 1: Analysis with 0% traffic to canary
      - setWeight: 0
      - analysis:
          templates:
          - templateName: result-curl-analysis
          args:
          - name: service-name
            value: result-preview
      
      # Step 2: Manual approval gate - requires promotion before routing traffic
      - pause: {}
      
      # Step 3: Route 5% traffic to canary
      - setWeight: 5
      - pause: {duration: 2m}
      
      # Step 4: Route 20% traffic to canary
      - setWeight: 20
      - pause: {duration: 2m}
      
      # Step 5: Route 50% traffic to canary
      - setWeight: 50
      - pause: {duration: 2m}
      
      # Step 6: Route 100% traffic to canary
      - setWeight: 100
  
  revisionHistoryLimit: 2
  
  selector:
    matchLabels:
      app: result
  
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - name: result
        image: dockersamples/examplevotingapp_result:latest  # Update with your image
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "80"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3